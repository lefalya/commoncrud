// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces/main.go

// Package mock_interfaces is a generated GoMock package.
package mock_interfaces

import (
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
	interfaces "github.com/lefalya/commoncrud/interfaces"
	types "github.com/lefalya/commoncrud/types"
)

// MockItem is a mock of Item interface.
type MockItem struct {
	ctrl     *gomock.Controller
	recorder *MockItemMockRecorder
}

// MockItemMockRecorder is the mock recorder for MockItem.
type MockItemMockRecorder struct {
	mock *MockItem
}

// NewMockItem creates a new mock instance.
func NewMockItem(ctrl *gomock.Controller) *MockItem {
	mock := &MockItem{ctrl: ctrl}
	mock.recorder = &MockItemMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItem) EXPECT() *MockItemMockRecorder {
	return m.recorder
}

// GetCreatedAt mocks base method.
func (m *MockItem) GetCreatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetCreatedAt indicates an expected call of GetCreatedAt.
func (mr *MockItemMockRecorder) GetCreatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAt", reflect.TypeOf((*MockItem)(nil).GetCreatedAt))
}

// GetCreatedAtString mocks base method.
func (m *MockItem) GetCreatedAtString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCreatedAtString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCreatedAtString indicates an expected call of GetCreatedAtString.
func (mr *MockItemMockRecorder) GetCreatedAtString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCreatedAtString", reflect.TypeOf((*MockItem)(nil).GetCreatedAtString))
}

// GetRandId mocks base method.
func (m *MockItem) GetRandId() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandId")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetRandId indicates an expected call of GetRandId.
func (mr *MockItemMockRecorder) GetRandId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandId", reflect.TypeOf((*MockItem)(nil).GetRandId))
}

// GetUUID mocks base method.
func (m *MockItem) GetUUID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUUID")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUUID indicates an expected call of GetUUID.
func (mr *MockItemMockRecorder) GetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUUID", reflect.TypeOf((*MockItem)(nil).GetUUID))
}

// GetUpdatedAt mocks base method.
func (m *MockItem) GetUpdatedAt() time.Time {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatedAt")
	ret0, _ := ret[0].(time.Time)
	return ret0
}

// GetUpdatedAt indicates an expected call of GetUpdatedAt.
func (mr *MockItemMockRecorder) GetUpdatedAt() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatedAt", reflect.TypeOf((*MockItem)(nil).GetUpdatedAt))
}

// GetUpdatedAtString mocks base method.
func (m *MockItem) GetUpdatedAtString() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdatedAtString")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetUpdatedAtString indicates an expected call of GetUpdatedAtString.
func (mr *MockItemMockRecorder) GetUpdatedAtString() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdatedAtString", reflect.TypeOf((*MockItem)(nil).GetUpdatedAtString))
}

// SetCreatedAt mocks base method.
func (m *MockItem) SetCreatedAt(time time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCreatedAt", time)
}

// SetCreatedAt indicates an expected call of SetCreatedAt.
func (mr *MockItemMockRecorder) SetCreatedAt(time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreatedAt", reflect.TypeOf((*MockItem)(nil).SetCreatedAt), time)
}

// SetCreatedAtString mocks base method.
func (m *MockItem) SetCreatedAtString(timeString string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetCreatedAtString", timeString)
}

// SetCreatedAtString indicates an expected call of SetCreatedAtString.
func (mr *MockItemMockRecorder) SetCreatedAtString(timeString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetCreatedAtString", reflect.TypeOf((*MockItem)(nil).SetCreatedAtString), timeString)
}

// SetRandId mocks base method.
func (m *MockItem) SetRandId() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetRandId")
}

// SetRandId indicates an expected call of SetRandId.
func (mr *MockItemMockRecorder) SetRandId() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetRandId", reflect.TypeOf((*MockItem)(nil).SetRandId))
}

// SetUUID mocks base method.
func (m *MockItem) SetUUID() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUUID")
}

// SetUUID indicates an expected call of SetUUID.
func (mr *MockItemMockRecorder) SetUUID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUUID", reflect.TypeOf((*MockItem)(nil).SetUUID))
}

// SetUpdatedAt mocks base method.
func (m *MockItem) SetUpdatedAt(time time.Time) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUpdatedAt", time)
}

// SetUpdatedAt indicates an expected call of SetUpdatedAt.
func (mr *MockItemMockRecorder) SetUpdatedAt(time interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdatedAt", reflect.TypeOf((*MockItem)(nil).SetUpdatedAt), time)
}

// SetUpdatedAtString mocks base method.
func (m *MockItem) SetUpdatedAtString(timeString string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetUpdatedAtString", timeString)
}

// SetUpdatedAtString indicates an expected call of SetUpdatedAtString.
func (mr *MockItemMockRecorder) SetUpdatedAtString(timeString interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUpdatedAtString", reflect.TypeOf((*MockItem)(nil).SetUpdatedAtString), timeString)
}

// MockPagination is a mock of Pagination interface.
type MockPagination[T interfaces.Item] struct {
	ctrl     *gomock.Controller
	recorder *MockPaginationMockRecorder[T]
}

// MockPaginationMockRecorder is the mock recorder for MockPagination.
type MockPaginationMockRecorder[T interfaces.Item] struct {
	mock *MockPagination[T]
}

// NewMockPagination creates a new mock instance.
func NewMockPagination[T interfaces.Item](ctrl *gomock.Controller) *MockPagination[T] {
	mock := &MockPagination[T]{ctrl: ctrl}
	mock.recorder = &MockPaginationMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPagination[T]) EXPECT() *MockPaginationMockRecorder[T] {
	return m.recorder
}

// AddItem mocks base method.
func (m *MockPagination[T]) AddItem(item T, paginationParameters ...string) *types.PaginationError {
	m.ctrl.T.Helper()
	varargs := []interface{}{item}
	for _, a := range paginationParameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddItem", varargs...)
	ret0, _ := ret[0].(*types.PaginationError)
	return ret0
}

// AddItem indicates an expected call of AddItem.
func (mr *MockPaginationMockRecorder[T]) AddItem(item interface{}, paginationParameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{item}, paginationParameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddItem", reflect.TypeOf((*MockPagination[T])(nil).AddItem), varargs...)
}

// FetchAll mocks base method.
func (m *MockPagination[T]) FetchAll(processor interfaces.PaginationProcessor[T], paginationParameters ...string) ([]T, *types.PaginationError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{processor}
	for _, a := range paginationParameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAll", varargs...)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(*types.PaginationError)
	return ret0, ret1
}

// FetchAll indicates an expected call of FetchAll.
func (mr *MockPaginationMockRecorder[T]) FetchAll(processor interface{}, paginationParameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{processor}, paginationParameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAll", reflect.TypeOf((*MockPagination[T])(nil).FetchAll), varargs...)
}

// FetchLinked mocks base method.
func (m *MockPagination[T]) FetchLinked(references []string, processor interfaces.PaginationProcessor[T], paginationParameters ...string) ([]T, *types.PaginationError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{references, processor}
	for _, a := range paginationParameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchLinked", varargs...)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(*types.PaginationError)
	return ret0, ret1
}

// FetchLinked indicates an expected call of FetchLinked.
func (mr *MockPaginationMockRecorder[T]) FetchLinked(references, processor interface{}, paginationParameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{references, processor}, paginationParameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchLinked", reflect.TypeOf((*MockPagination[T])(nil).FetchLinked), varargs...)
}

// FetchOne mocks base method.
func (m *MockPagination[T]) FetchOne(randId string) (*T, *types.PaginationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchOne", randId)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(*types.PaginationError)
	return ret0, ret1
}

// FetchOne indicates an expected call of FetchOne.
func (mr *MockPaginationMockRecorder[T]) FetchOne(randId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchOne", reflect.TypeOf((*MockPagination[T])(nil).FetchOne), randId)
}

// RemoveItem mocks base method.
func (m *MockPagination[T]) RemoveItem(item T, paginationParameters ...string) *types.PaginationError {
	m.ctrl.T.Helper()
	varargs := []interface{}{item}
	for _, a := range paginationParameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "RemoveItem", varargs...)
	ret0, _ := ret[0].(*types.PaginationError)
	return ret0
}

// RemoveItem indicates an expected call of RemoveItem.
func (mr *MockPaginationMockRecorder[T]) RemoveItem(item interface{}, paginationParameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{item}, paginationParameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveItem", reflect.TypeOf((*MockPagination[T])(nil).RemoveItem), varargs...)
}

// SeedAll mocks base method.
func (m *MockPagination[T]) SeedAll(processor interfaces.SeedProcessor[T], paginationParameters ...string) ([]T, *types.PaginationError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{processor}
	for _, a := range paginationParameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SeedAll", varargs...)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(*types.PaginationError)
	return ret0, ret1
}

// SeedAll indicates an expected call of SeedAll.
func (mr *MockPaginationMockRecorder[T]) SeedAll(processor interface{}, paginationParameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{processor}, paginationParameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedAll", reflect.TypeOf((*MockPagination[T])(nil).SeedAll), varargs...)
}

// SeedCardinality mocks base method.
func (m *MockPagination[T]) SeedCardinality(paginationParameters ...string) *types.PaginationError {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range paginationParameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SeedCardinality", varargs...)
	ret0, _ := ret[0].(*types.PaginationError)
	return ret0
}

// SeedCardinality indicates an expected call of SeedCardinality.
func (mr *MockPaginationMockRecorder[T]) SeedCardinality(paginationParameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedCardinality", reflect.TypeOf((*MockPagination[T])(nil).SeedCardinality), paginationParameters...)
}

// SeedLinked mocks base method.
func (m *MockPagination[T]) SeedLinked(lastItem T, processor interfaces.SeedProcessor[T], paginationParameters ...string) ([]T, *types.PaginationError) {
	m.ctrl.T.Helper()
	varargs := []interface{}{lastItem, processor}
	for _, a := range paginationParameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SeedLinked", varargs...)
	ret0, _ := ret[0].([]T)
	ret1, _ := ret[1].(*types.PaginationError)
	return ret0, ret1
}

// SeedLinked indicates an expected call of SeedLinked.
func (mr *MockPaginationMockRecorder[T]) SeedLinked(lastItem, processor interface{}, paginationParameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{lastItem, processor}, paginationParameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedLinked", reflect.TypeOf((*MockPagination[T])(nil).SeedLinked), varargs...)
}

// SeedOne mocks base method.
func (m *MockPagination[T]) SeedOne(randId string) (*T, *types.PaginationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SeedOne", randId)
	ret0, _ := ret[0].(*T)
	ret1, _ := ret[1].(*types.PaginationError)
	return ret0, ret1
}

// SeedOne indicates an expected call of SeedOne.
func (mr *MockPaginationMockRecorder[T]) SeedOne(randId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SeedOne", reflect.TypeOf((*MockPagination[T])(nil).SeedOne), randId)
}

// TotalItemOnCache mocks base method.
func (m *MockPagination[T]) TotalItemOnCache(paginationParameters ...string) *types.PaginationError {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range paginationParameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "TotalItemOnCache", varargs...)
	ret0, _ := ret[0].(*types.PaginationError)
	return ret0
}

// TotalItemOnCache indicates an expected call of TotalItemOnCache.
func (mr *MockPaginationMockRecorder[T]) TotalItemOnCache(paginationParameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalItemOnCache", reflect.TypeOf((*MockPagination[T])(nil).TotalItemOnCache), paginationParameters...)
}

// UpdateItem mocks base method.
func (m *MockPagination[T]) UpdateItem(item T, paginationParameters ...string) *types.PaginationError {
	m.ctrl.T.Helper()
	varargs := []interface{}{item}
	for _, a := range paginationParameters {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateItem", varargs...)
	ret0, _ := ret[0].(*types.PaginationError)
	return ret0
}

// UpdateItem indicates an expected call of UpdateItem.
func (mr *MockPaginationMockRecorder[T]) UpdateItem(item interface{}, paginationParameters ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{item}, paginationParameters...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateItem", reflect.TypeOf((*MockPagination[T])(nil).UpdateItem), varargs...)
}

// MockItemCache is a mock of ItemCache interface.
type MockItemCache[T interfaces.Item] struct {
	ctrl     *gomock.Controller
	recorder *MockItemCacheMockRecorder[T]
}

// MockItemCacheMockRecorder is the mock recorder for MockItemCache.
type MockItemCacheMockRecorder[T interfaces.Item] struct {
	mock *MockItemCache[T]
}

// NewMockItemCache creates a new mock instance.
func NewMockItemCache[T interfaces.Item](ctrl *gomock.Controller) *MockItemCache[T] {
	mock := &MockItemCache[T]{ctrl: ctrl}
	mock.recorder = &MockItemCacheMockRecorder[T]{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockItemCache[T]) EXPECT() *MockItemCacheMockRecorder[T] {
	return m.recorder
}

// Del mocks base method.
func (m *MockItemCache[T]) Del(item T) *types.PaginationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Del", item)
	ret0, _ := ret[0].(*types.PaginationError)
	return ret0
}

// Del indicates an expected call of Del.
func (mr *MockItemCacheMockRecorder[T]) Del(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Del", reflect.TypeOf((*MockItemCache[T])(nil).Del), item)
}

// Get mocks base method.
func (m *MockItemCache[T]) Get(randId string) (T, *types.PaginationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", randId)
	ret0, _ := ret[0].(T)
	ret1, _ := ret[1].(*types.PaginationError)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockItemCacheMockRecorder[T]) Get(randId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItemCache[T])(nil).Get), randId)
}

// Set mocks base method.
func (m *MockItemCache[T]) Set(item T) *types.PaginationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", item)
	ret0, _ := ret[0].(*types.PaginationError)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockItemCacheMockRecorder[T]) Set(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockItemCache[T])(nil).Set), item)
}
